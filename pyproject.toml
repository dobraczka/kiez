[tool.poetry]
name = "kiez"
version = "0.4.4"
description = "Hubness reduced nearest neighbor search for entity alignment with knowledge graph embeddings"
authors = ["Daniel Obraczka <obraczka@informatik.uni-leipzig.de>"]
license = "BSD"
readme = "README.md"
repository = "https://github.com/dobraczka/kiez"
documentation = "https://kiez.readthedocs.io/"
keywords = ["embedding","hubness", "knowledge graph", "entity resolution", "approximate nearest neighbor search", "nearest neighbors", "knowledge graph embedding"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries"
]
packages = [
  {include = "kiez"},
  {include = "kiez/py.typed"},
]


[tool.poetry.dependencies]
python = ">=3.8,<4.0"
scikit-learn = ">=0.24.1,<2.0.0"
pandas = "^1.1.5"
joblib = "^1.2.0"
numpy = "^1.21.0"
scipy = "^1.3.2"
class-resolver = ">=0.3"
tqdm = "^4.62.3"
ngt = {version = "^1.8", optional = true}
annoy = {version = "^1.17.0", optional = true}
nmslib = {version = "^2.1.1", optional = true}
Sphinx = {version = "^5.0.0", optional = true}
insegel = {version = "^1.3.1", optional = true}

[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.9"
mypy = "^1.8.0"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
nox-poetry = "^1.0.0"
pytest-mock = "^3.12.0"
toml = "^0.10.2"
ruff = "^0.1.9"

[tool.poetry.extras]
docs = ["sphinx", "insegel"]
ngt = ["ngt"]
nmslib = ["nmslib"]
annoy = ["annoy"]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
ignore = ["E111", "E114", "E117", "E501", "D1", "D203", "D213", "D206", "D300", "Q000", "Q001", "Q002", "Q003", "COM812", "COM819", "ISC001","ISC002", "B905", "W191", "PLR0913", "PLR0912"]
select = ["B", "C", "E", "F", "W", "B", "I", "D", "UP", "A", "C4", "T10", "ICN", "PIE", "PYI", "PT", "RET", "SIM", "ERA", "PD", "PGH", "PL", "NPY", "PERF", "RUF"]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
