[tool.poetry]
name = "kiez"
version = "0.4.4"
description = "Hubness reduced nearest neighbor search for entity alignment with knowledge graph embeddings"
authors = ["Daniel Obraczka <obraczka@informatik.uni-leipzig.de>"]
license = "BSD"
readme = "README.md"
repository = "https://github.com/dobraczka/kiez"
documentation = "https://kiez.readthedocs.io/"
keywords = ["embedding","hubness", "knowledge graph", "entity resolution", "approximate nearest neighbor search", "nearest neighbors", "knowledge graph embedding"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries"
]
packages = [
  {include = "kiez"},
  {include = "kiez/py.typed"},
]


[tool.poetry.dependencies]
python = ">=3.8,<4.0"
scikit-learn = ">=0.24.1,<2.0.0"
pandas = "^1.1.5"
joblib = "^1.2.0"
numpy = "^1.21.0"
scipy = "^1.3.2"
class-resolver = ">=0.3"
tqdm = "^4.62.3"
ngt = {version = "^1.8", optional = true}
annoy = {version = "^1.17.0", optional = true}
nmslib = {version = "^2.1.1", optional = true}
Sphinx = {version = "^5.0.0", optional = true}
insegel = {version = "^1.3.1", optional = true}

[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.9"
mypy = "^1.5.1"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pyproject-flake8 = "^0.0.1a4"
flake8-eradicate = "^1.2.1"
flake8-isort = "^4.1.1"
flake8-debugger = "^4.1.2"
flake8-comprehensions = "^3.10.0"
flake8-print = "^5.0.0"
nox-poetry = "^1.0.0"
black = "^22.3.0"
pytest-mock = "^3.7.0"
pydocstyle = "^6.1.1"
flake8-bugbear = "^22.7.1"
toml = "^0.10.2"

[tool.poetry.extras]
docs = ["sphinx", "insegel"]
ngt = ["ngt"]
nmslib = ["nmslib"]
annoy = ["annoy"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
ignore = "E203, E266, E501, W503, F403, F401, B950, B905"
max-line-length = 88
max-complexity = 18
select = "B,C,E,F,W,T4,B9"
count = "true"
show-source = "true"
statistics = "true"

[tool.black]
line-length = 88
experimental-string-processing = true
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''


[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
reverse_relative = true
